package user;

import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import java.security.SecureRandom;
import java.util.Arrays;
import java.util.function.BiConsumer;
import java.util.function.BinaryOperator;
import java.util.function.Function;
import java.util.function.Supplier;

public class PasswordEncryption {

    // 메서드: salt 생성
    private static byte[] getSalt() throws NoSuchAlgorithmException {
        SecureRandom sr = SecureRandom.getInstance("SHA1PRNG");
        byte[] salt = new byte[16];
        sr.nextBytes(salt);
        return salt;
    }

    // 메서드: 비밀번호와 salt를 사용하여 SHA-256 해시 생성
    private static byte[] getSHA256Hash(String password, byte[] salt) throws NoSuchAlgorithmException {
        MessageDigest md = MessageDigest.getInstance("SHA-256");
        md.update(salt);
        return md.digest(password.getBytes());
    }

    // 메서드: 비밀번호 암호화 (salt와 해시를 포함한 문자열 반환)
    public static String encryptPassword(String password) throws NoSuchAlgorithmException {
        byte[] salt = getSalt();
        byte[] hash = getSHA256Hash(password, salt);
        return Arrays.toString(salt) + ":" + Arrays.toString(hash);
    }

    // 메서드: 입력된 비밀번호가 저장된 해시와 일치하는지 확인
    public static boolean verifyPassword(String password, String storedPassword) throws NoSuchAlgorithmException {
        String[] parts = storedPassword.split(":");
        byte[] salt = Arrays.stream(parts[0].replaceAll("\\[|\\]|\\s", "").split(","))
                            .map(Byte::parseByte)
                            .collect(ByteArrayCollector.toByteArray());
        byte[] storedHash = Arrays.stream(parts[1].replaceAll("\\[|\\]|\\s", "").split(","))
                                  .map(Byte::parseByte)
                                  .collect(ByteArrayCollector.toByteArray());

        byte[] hash = getSHA256Hash(password, salt);
        return Arrays.equals(hash, storedHash);
    }

    // Helper class to collect Byte Stream to byte array
    private static class ByteArrayCollector implements java.util.stream.Collector<Byte, java.util.List<Byte>, byte[]> {
        public static ByteArrayCollector toByteArray() {
            return new ByteArrayCollector();
        }

        @Override
        public Supplier<java.util.List<Byte>> supplier() {
            return java.util.ArrayList::new;
        }

        @Override
        public BiConsumer<java.util.List<Byte>, Byte> accumulator() {
            return java.util.List::add;
        }

        @Override
        public BinaryOperator<java.util.List<Byte>> combiner() {
            return (left, right) -> { left.addAll(right); return left; };
        }

        @Override
        public Function<java.util.List<Byte>, byte[]> finisher() {
            return byteList -> {
                byte[] byteArray = new byte[byteList.size()];
                for (int i = 0; i < byteList.size(); i++) {
                    byteArray[i] = byteList.get(i);
                }
                return byteArray;
            };
        }

        @Override
        public java.util.Set<Characteristics> characteristics() {
            return java.util.Collections.emptySet();
        }
    }
}